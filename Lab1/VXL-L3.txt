1. Đọc memorry map
2. Cần file .ld (linker script) -> đọc datasheet hoặc có linker script mẫu --> vào file mdk -> link.ld
--> chi ra memory cua chip gom icase iram(doc ghi), ... --> chi ra dia chi bat dau 
.text -> ma lenh chuong trinh
tu dong 48 -> chi ra cac ham (va vi tri luu)
bsp (board support package) -> dc cung cap vao trong mdk.h (trong TH nay)
--> dinh nghia dia chi cua cac thanh ghi giao dien vao ra, các hằng số, cung cấp một số hàm (vd hàm lặp lại lệnh loop, hàm làm delay, hàm để init cái SoC (MCU) --> thực ra là implement cái được ghi trong datasheet; định nghĩa ngoại vi (các LED,..)...)

Nhắc lại: Khái niệm toolchain (cần tìm tool chain); linker script (chứa thông tin về memory map); bsp (chứa các hàm, địa chỉ của thanh ghi I/O)

* Boot code: Khi bật máy lên lệnh nào đầu tiên đc chạy? 
-> Lệnh đầu tiên đấy gọi là boot code (ROM code) -> cứ bật lên là chạy và k can thiệp được
-> sau đó đọc tới nhưngx lệnh đâu tiên mà mình can thiệp đc -> boot loader

*Boot Loader: Thông thường được cung cấp trong bsp dưới file tên là boot.c hoặc boot.h --> là lệnh đầu tiên sau boot code cứng (k can thiệp được) và cần mình xây dựng (dựa trên thông tin nhà sản xuất cho sẵn)

 Dùng toolchain ghép tất cả các file trên (link, mdk, boot) (bằng makefile)
 
 Chú ý file esp32 trong mdk (CFLAS có architecture mình cần = rv32imc; TOOLCHAIN)
 
 

 
 --------------------------------------------
 TỔNG KẾT: SAU KHI CÀI ĐẶT
 1. Xác định đường dẫn tới các file toolchain
 	- riscv32-esp-elf-gcc, riscv32-esp-elf-g++, riscv32-esp-elf-ld
 		--> Cách 1: chạy file có sẵn của người ta và tìm
 		--> Cách 2: search file
 
 2. Thiết lập biến môi trường PATH để chỉ tới đường dẫn của toolchain (sử dụng lệnh export trong linux)
 	--> Biến môi trường path dùng để chỉ ra các đường dẫn mà hệ điều hành chỉ ra chương trình thực thi -> cần thiết lập
 	
3. Tìm/xây dựng linker script - nơi chứa các thông tin về bản đồ bộ nhớ của MCU (thường là file *.ld)
4. Tìm/xây dựng bsp (board support package) nơi chứa 
	- các điạ chỉ của thanh ghi giao diện vào ra và một số hàm hỗ trợ vào ra (hàm để ghi/đọc các thanh ghi IO)
	- một số hàm để khởi tạo SoC, bộ nhớ, ngoại vi

5. Tìm/xây dựng boot code (thường trong file boot.c hoặc boot.s hoặc ctr0.s): chứa code được nạp vào vùng bootloader mà MCU sẽ thực hiện sau code trong ROM boot
	-> thông thường: 
		- khởi tạo MCU, khởi tạo RAM, khởi tạo I/O
		- nạp và gọi hàm main()
		
6. Viết chương tình thực hiện nhiệm vụ - hàm main(),...

7. Tìm/xây dựng file hướng dẫn biên dịch Makefile trong đó:
	- Thiết lập các cờ biên dịch
	- Thiết lập các biến môi trường chỉ tới TOOLCHAIN
	- Biến môi trường chỉ ra kiến trungs đích

8. Biên dịch chương trình: make build, make clean, ...

9. Nạp chương trình sử dụng tool flash (đọc file mình biên dịch ra và đưa vào bộ nhớ flash)


---------------------------------------------------
CÁC NHIỆM VỤ CẦN THỰC HIỆN
- Biên dịch và chạy được chương trình blink example từ BSP mdk
- Xây dựng LED cắm vào châm GPIO tương ứng -> đọc code xem đang nháy chân GPIO nào.
	--> Cần tìm hiểu khi 1 (H) và 0 (L) điện áp là bao nhiêu V
- Làm 1 mạch chứa đèn LED đơn giản và nối với chân GPIO được điều khiển trong blink
- Báo cáo (slides) các kết quả
	+ Đường dẫn tới toolchain (2)
	+ Chụp màn hình chạy make (3)
	+ Đoạn quay ngắn thể hiện led đã chạy (5)
	+ Bonus: Tìm hiểu về dẫn hướng biên dịch -c, -s, và phần mềm risv32-esp-elf-nm. Thực hienj lại các bước 
		a. Biên dịch .c -> .asm -> .o -> .elf -> .bin (không dungf makefile) (5)
		
		
--------------------------------
Search: gcc compiler assembly output; gcc nm tutorial

---------------------------------
Debug tool (dùng oscillo)



---------------------------------------
b
